// <auto-generated />
using System;
using Justpharm.Web.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Justpharm.Web.Migrations.Justpharm
{
    [DbContext(typeof(JustpharmContext))]
    [Migration("20240507201929_PrimeraMigracionDocker")]
    partial class PrimeraMigracionDocker
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspNetRolesAspNetUsers", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleId", "UserId");

                    b.ToTable("AspNetRolesAspNetUsers");
                });

            modelBuilder.Entity("AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Justpharm.Web.Models.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Justpharm.Web.Models.AspNetRoles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Justpharm.Web.Models.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Justpharm.Web.Models.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Justpharm.Web.Models.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Justpharm.Web.Models.AspNetUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Justpharm.Web.Models.EfectoSecundario", b =>
                {
                    b.Property<Guid>("UidEfectoSecundario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("IdTratamiento")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Titulo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("UidPaciente")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UidEfectoSecundario")
                        .HasName("EfectoSecundario_PK");

                    b.HasIndex(new[] { "UidPaciente" }, "IX_EfectoSecundario");

                    b.ToTable("EfectoSecundario");
                });

            modelBuilder.Entity("Justpharm.Web.Models.Favoritos", b =>
                {
                    b.Property<Guid>("UidFavoritos")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("IdMedicamento")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UidFavoritos")
                        .HasName("Favoritos_PK");

                    b.HasIndex("UserId");

                    b.ToTable("Favoritos");
                });

            modelBuilder.Entity("Justpharm.Web.Models.Medicamento", b =>
                {
                    b.Property<Guid>("UidMedicamento")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CN")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Imagen")
                        .HasMaxLength(650)
                        .HasColumnType("nvarchar(650)");

                    b.Property<string>("Laboratorio")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nchar(255)")
                        .IsFixedLength();

                    b.Property<string>("RecetaHtml")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UidMedicamento")
                        .HasName("PK__Medicame__3214EC075F449857");

                    b.ToTable("Medicamento");
                });

            modelBuilder.Entity("Justpharm.Web.Models.Notificacion", b =>
                {
                    b.Property<Guid>("UidNotificacion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("IdTratamiento")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Titulo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UsuarioId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("UidNotificacion")
                        .HasName("Notificacion_PK");

                    b.HasIndex("IdTratamiento");

                    b.ToTable("Notificacion");
                });

            modelBuilder.Entity("Justpharm.Web.Models.Paciente", b =>
                {
                    b.Property<Guid>("UidPaciente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("Alergias")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("Altura")
                        .HasColumnType("float");

                    b.Property<int?>("Edad")
                        .HasColumnType("int");

                    b.Property<bool?>("EnfermedadCronica")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("Peso")
                        .HasColumnType("float");

                    b.Property<bool?>("SexoMasculino")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UidPaciente")
                        .HasName("Paciente_PK");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "UidPaciente" }, "IX_Paciente")
                        .IsUnique();

                    b.ToTable("Paciente");
                });

            modelBuilder.Entity("Justpharm.Web.Models.Tratamiento", b =>
                {
                    b.Property<Guid>("UidTratamiento")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<double?>("Intervalo")
                        .HasColumnType("float");

                    b.Property<string>("RecurrenceException")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("RecurrenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RecurrenceRule")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RecurrenceSumary")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Tomas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<Guid>("UidMedicamento")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UidTomas")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UidTratamiento")
                        .HasName("Tratamiento_PK");

                    b.HasIndex("UidMedicamento");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Tratamiento");
                });

            modelBuilder.Entity("AspNetUserRoles", b =>
                {
                    b.HasOne("Justpharm.Web.Models.AspNetRoles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Justpharm.Web.Models.AspNetUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Justpharm.Web.Models.AspNetRoleClaims", b =>
                {
                    b.HasOne("Justpharm.Web.Models.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Justpharm.Web.Models.AspNetUserClaims", b =>
                {
                    b.HasOne("Justpharm.Web.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Justpharm.Web.Models.AspNetUserLogins", b =>
                {
                    b.HasOne("Justpharm.Web.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Justpharm.Web.Models.AspNetUserTokens", b =>
                {
                    b.HasOne("Justpharm.Web.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Justpharm.Web.Models.EfectoSecundario", b =>
                {
                    b.HasOne("Justpharm.Web.Models.Paciente", "UidPacienteNavigation")
                        .WithMany("EfectoSecundario")
                        .HasForeignKey("UidPaciente")
                        .IsRequired()
                        .HasConstraintName("EfectoSecundario_Paciente_FK");

                    b.Navigation("UidPacienteNavigation");
                });

            modelBuilder.Entity("Justpharm.Web.Models.Favoritos", b =>
                {
                    b.HasOne("Justpharm.Web.Models.AspNetUsers", "User")
                        .WithMany("Favoritos")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Favoritos_AspNetUsers_FK");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Justpharm.Web.Models.Notificacion", b =>
                {
                    b.HasOne("Justpharm.Web.Models.Tratamiento", "IdTratamientoNavigation")
                        .WithMany("Notificacion")
                        .HasForeignKey("IdTratamiento")
                        .HasConstraintName("Notificacion_Tratamiento_FK");

                    b.Navigation("IdTratamientoNavigation");
                });

            modelBuilder.Entity("Justpharm.Web.Models.Paciente", b =>
                {
                    b.HasOne("Justpharm.Web.Models.AspNetUsers", "User")
                        .WithMany("Paciente")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("Paciente_AspNetUsers_FK");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Justpharm.Web.Models.Tratamiento", b =>
                {
                    b.HasOne("Justpharm.Web.Models.Medicamento", "UidMedicamentoNavigation")
                        .WithMany("Tratamiento")
                        .HasForeignKey("UidMedicamento")
                        .IsRequired()
                        .HasConstraintName("FK_Tratamiento_Medicamento");

                    b.HasOne("Justpharm.Web.Models.AspNetUsers", "Usuario")
                        .WithMany("Tratamiento")
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("Tratamiento_AspNetUsers_FK");

                    b.Navigation("UidMedicamentoNavigation");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Justpharm.Web.Models.AspNetRoles", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("Justpharm.Web.Models.AspNetUsers", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("Favoritos");

                    b.Navigation("Paciente");

                    b.Navigation("Tratamiento");
                });

            modelBuilder.Entity("Justpharm.Web.Models.Medicamento", b =>
                {
                    b.Navigation("Tratamiento");
                });

            modelBuilder.Entity("Justpharm.Web.Models.Paciente", b =>
                {
                    b.Navigation("EfectoSecundario");
                });

            modelBuilder.Entity("Justpharm.Web.Models.Tratamiento", b =>
                {
                    b.Navigation("Notificacion");
                });
#pragma warning restore 612, 618
        }
    }
}
